Remaining Methods required

*** OFFERED ITEMS ***

- GET ALL OFFERED ITEMS (ADMIN SIDE) ** COMPLETE **
- GET OFFERED ITEMS DETAIL BY OFFERED ITEM ID (ADMIN SIDE) ** COMPLETE **
- UPDATE STATUS OF OFFERED ITEM BY OFFERED ITEM ID (ADMIN SIDE)
- UPDATE DETAILS OF OFFERED ITEMS BY OFFERED ITEM ID (ADMIN) ** COMPLETE **
** - ADD OFFERED ITEM BY USER ID ** FUTURE MAYBE?


- GET ALL OFFERED ITEMS BY USER ID (PRODUCER SIDE) ** COMPLETE **
- ADD OFFERED ITEMS BY USER ID (PRODUCER SIDE) ** COMPLETE **
- GET OFFERED ITEM DETAILS BY OFFERED ITEM ID (PRODUCER) ** COMPLETE **
- UPDATE DETAILS OF OFFERED ITEMS BY OFFERED ITEM ID (PRODUCER) ** COMPLETE **

*** USERS ***
- FIGURE OUT AUTHORIZATION (GOOGLE OATH?)
    THIS IS TIED TO IS_PRODUCER, IS_ADMIN, IS_OTHER BOOLEAN FIELDS IN USER TABLE
- FIGURE OUT HOW TO MANAGE SESSIONS WITH TOKENS


** DISPLAY ON FRONT END ADMIN SIDE
- SHOW A LIST OF USERS
- MOVE ADD NEW USERS TO IT'S OWN MODAL THAT GETS GENERATED THROUGH A BUTTON ON THE LIST OF USERS
- USE SAME COMPONENT FOR ADD NEWS USERS TO UPDATE CURRENT USERS


** MAINTENANCE
- UPDATE README FOR BACKEND (WINDOWS, MAC, LINUX)


cur.execute(f'SELECT * FROM offered_item where user_id = {id};')
    # select statement will need to be refactored
    # sql statement from node file is as follows:
    # `SELECT OFFERED_ITEM.*, STATUS_TRACKER.*, R_STATUS.STATUS_NAME \
    # FROM OFFERED_ITEM \
    # FULL JOIN STATUS_TRACKER \
    # ON OFFERED_ITEM.ID = STATUS_TRACKER.OFFER_ID \
    # INNER JOIN R_STATUS \
    # ON STATUS_TRACKER.STATUS_ID = R_STATUS.ID \
    # WHERE USER_ID = ${user_id} \
    # AND END_DATE IS NULL;
    # above is not for MVP but will be required to keep history of offered items and status